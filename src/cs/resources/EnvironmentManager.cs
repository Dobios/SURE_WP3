/**
	Sustainable Energy Development game modeling the Swiss energy Grid.
	Copyright (C) 2023 Universit√† della Svizzera Italiana

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
using Godot;
using System;
using System.Collections.Generic;
using System.Linq;

// Models the environment resource
public struct Environment {
	public int Pollution; // Aggregate amount of pollution generated by the power plants
	public float LandUse; // Aggregate space taken up by all of the power plants
	public float Biodiversity; // Level of biodiversity remaining on the map

	// Basic constructor for the environment struct
	public Environment(int p=0, float lu=0.0f, float bd=0.0f) {
		Pollution = p;

		// Make sure that the following two metrics are percentages
		LandUse = Math.Max(0.0f, Math.Min(lu, 1.0f)); 
		Biodiversity = Math.Max(0.0f, Math.Min(bd, 1.0f));
	}
}

// @brief: Manages all of the resources related to the environment bar.
// This inlcudes land use, pollution, and biodiversity.
// These metrics are all encoded directly in each power plant.
// Some plants reduce them, some increase them, this class aggregates those
// metrics and propagates the information across the game to the UI and GameLoop.
public partial class EnvironmentManager : Node {

	// Maximum value allowed by the UI
	public const int MAX_ENV_BAR_VAL = 100;

	// List of all of the power plants currently in the game
	private List<PowerPlant> PowerPlants;

	// Keep track of all of the environmental resources
	private Environment Env;

	// ==================== GODOT Method Overrides ====================

	// Called when the node enters the scene tree for the first time.
	public override void _Ready() {

		// Initialize Power Plants
		PowerPlants = new List<PowerPlant>();
	}

	// Called every frame. 'delta' is the elapsed time since the previous frame.
	public override void _Process(double delta) {
	}

	// ==================== Public API ====================

	// Updates the current internal power plant list
	public void _UpdatePowerPlants(List<PowerPlant> lP) {
		// Clear the current list to be safe
		PowerPlants.Clear();

		// Fill in the contents of the list with those of the given one
		foreach(PowerPlant pp in lP) {
			PowerPlants.Add(pp);
		}
	}
}
